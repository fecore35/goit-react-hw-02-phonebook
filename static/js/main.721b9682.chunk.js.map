{"version":3,"sources":["components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["ContactForm","state","name","number","handlerChange","event","setState","target","value","onSaveContact","preventDefault","newContact","id","uuidv4","props","onSave","this","onSubmit","htmlFor","type","pattern","title","required","onChange","Component","Filter","filter","ContactList","list","className","map","App","contacts","newContactName","toUpperCase","find","alert","prevState","visibleContacts","search","contact","includes","contactsList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAGMA,E,4MACJC,MAAQ,CACNC,KAAM,GACNC,OAAQ,I,EAGVC,cAAgB,SAACC,GACf,EAAKC,SAAL,eACGD,EAAME,OAAOL,KAAOG,EAAME,OAAOC,S,EAItCC,cAAgB,SAACJ,GACfA,EAAMK,iBAEN,IAAMC,EAAa,CACjBC,GAAIC,cACJX,KAAM,EAAKD,MAAMC,KACjBC,OAAQ,EAAKF,MAAME,QAGrB,EAAKG,SAAS,CACZJ,KAAM,GACNC,OAAQ,KAGV,EAAKW,MAAMC,OAAOJ,I,4CAGpB,WACE,MAAyBK,KAAKf,MAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OAEd,OACE,uBAAMc,SAAUD,KAAKP,cAArB,UACE,wBAAOS,QAAQ,GAAf,iBAEE,uBACEC,KAAK,OACLjB,KAAK,OACLkB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRd,MAAON,EACPqB,SAAUP,KAAKZ,mBAInB,wBAAOc,QAAQ,GAAf,mBAEE,uBACEC,KAAK,MACLjB,KAAK,SACLkB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRd,MAAOL,EACPoB,SAAUP,KAAKZ,mBAInB,wBAAQe,KAAK,SAAb,gC,GA5DkBK,aAkEXxB,ICrDAyB,MAhBf,YAA4C,IAA1BC,EAAyB,EAAzBA,OAAQtB,EAAiB,EAAjBA,cACxB,OACE,qCACE,qDACA,uBACEe,KAAK,OACLjB,KAAK,SACLkB,QAAQ,yHACRC,MAAM,kcACNb,MAAOkB,EACPH,SAAUnB,QCIHuB,MAdf,YAAgC,IAATC,EAAQ,EAARA,KACrB,OACE,oBAAIC,UAAU,GAAd,SACGD,EAAKE,KAAI,YAA2B,IAAxBlB,EAAuB,EAAvBA,GAAIV,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACrB,OACE,+BACGD,EADH,KACWC,IADFS,SCCbmB,E,4MACJ9B,MAAQ,CACN+B,SAAU,CACR,CAAEpB,GAAI,OAAQV,KAAM,gBAAiBC,OAAQ,aAC7C,CAAES,GAAI,OAAQV,KAAM,iBAAkBC,OAAQ,aAC9C,CAAES,GAAI,OAAQV,KAAM,gBAAiBC,OAAQ,aAC7C,CAAES,GAAI,OAAQV,KAAM,iBAAkBC,OAAQ,cAEhDuB,OAAQ,I,EAGVtB,cAAgB,SAACC,GACf,EAAKC,SAAL,eACGD,EAAME,OAAOL,KAAOG,EAAME,OAAOC,S,EAItCC,cAAgB,SAACE,GACf,IAAQqB,EAAa,EAAK/B,MAAlB+B,SACFC,EAAiBtB,EAAWT,KAAKgC,cAMvC,GAJqBF,EAASG,MAC5B,qBAAGjC,KAAgBgC,gBAAkBD,KAIrC,OAAOG,MAAM,GAAD,OAAIzB,EAAWT,KAAf,6BAGd,EAAKI,UAAS,SAAC+B,GAAD,MAAgB,CAC5BL,SAAS,CAAErB,GAAH,mBAAkB0B,EAAUL,gB,EAIxCM,gBAAkB,WAChB,IAAMC,EAAS,EAAKtC,MAAMyB,OAAOQ,cACjC,OAAO,EAAKjC,MAAM+B,SAASN,QAAO,SAACc,GAAD,OAChCA,EAAQtC,KAAKgC,cAAcO,SAASF,O,4CAIxC,WACE,IAAQb,EAAWV,KAAKf,MAAhByB,OACFgB,EAAe1B,KAAKsB,kBAE1B,OACE,gCACE,2CACA,cAAC,EAAD,CAAavB,OAAQC,KAAKP,gBAE1B,0CACA,cAAC,EAAD,CAAQiB,OAAQA,EAAQtB,cAAeY,KAAKZ,gBAC5C,cAAC,EAAD,CAAawB,KAAMc,W,GApDTlB,aA0DHO,IC5DfY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.721b9682.chunk.js","sourcesContent":["import { Component } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handlerChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  onSaveContact = (event) => {\n    event.preventDefault();\n\n    const newContact = {\n      id: uuidv4(),\n      name: this.state.name,\n      number: this.state.number,\n    };\n\n    this.setState({\n      name: \"\",\n      number: \"\",\n    });\n\n    this.props.onSave(newContact);\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form onSubmit={this.onSaveContact}>\n        <label htmlFor=\"\">\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={this.handlerChange}\n          />\n        </label>\n\n        <label htmlFor=\"\">\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            onChange={this.handlerChange}\n          />\n        </label>\n\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","function Filter({ filter, handlerChange }) {\n  return (\n    <>\n      <p>Find contact by name</p>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        value={filter}\n        onChange={handlerChange}\n      />\n    </>\n  );\n}\n\nexport default Filter;\n","function ContactList({ list }) {\n  return (\n    <ul className=\"\">\n      {list.map(({ id, name, number }) => {\n        return (\n          <li key={id}>\n            {name}: {number}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nexport default ContactList;\n","import React, { Component } from \"react\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactList from \"./components/ContactList/ContactList\";\n// import PropTypes from 'prop-types'\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  };\n\n  handlerChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  onSaveContact = (newContact) => {\n    const { contacts } = this.state;\n    const newContactName = newContact.name.toUpperCase();\n\n    const knownContact = contacts.find(\n      ({ name }) => name.toUpperCase() === newContactName\n    );\n\n    if (knownContact) {\n      return alert(`${newContact.name} is already in contacts.`);\n    }\n\n    this.setState((prevState) => ({\n      contacts: [newContact, ...prevState.contacts],\n    }));\n  };\n\n  visibleContacts = () => {\n    const search = this.state.filter.toUpperCase();\n    return this.state.contacts.filter((contact) =>\n      contact.name.toUpperCase().includes(search)\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n    const contactsList = this.visibleContacts();\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm onSave={this.onSaveContact} />\n\n        <h2>Contacts</h2>\n        <Filter filter={filter} handlerChange={this.handlerChange} />\n        <ContactList list={contactsList} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}